/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Equipment model module.
 * @module model/Equipment
 * @version 1.0.0
 */
class Equipment {
    /**
     * Constructs a new <code>Equipment</code>.
     * @alias module:model/Equipment
     * @param eqName {String} 
     * @param eqType {String} 
     * @param eqCost {Number} 
     * @param eqFix {String} 
     */
    constructor(eqName, eqType, eqCost, eqFix) { 
        
        Equipment.initialize(this, eqName, eqType, eqCost, eqFix);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eqName, eqType, eqCost, eqFix) { 
        obj['eqName'] = eqName;
        obj['eqType'] = eqType;
        obj['eqCost'] = eqCost;
        obj['eqFix'] = eqFix;
    }

    /**
     * Constructs a <code>Equipment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Equipment} obj Optional instance to populate.
     * @return {module:model/Equipment} The populated <code>Equipment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Equipment();

            if (data.hasOwnProperty('_id')) {
                obj['_id'] = ApiClient.convertToType(data['_id'], 'String');
            }
            if (data.hasOwnProperty('eqName')) {
                obj['eqName'] = ApiClient.convertToType(data['eqName'], 'String');
            }
            if (data.hasOwnProperty('eqType')) {
                obj['eqType'] = ApiClient.convertToType(data['eqType'], 'String');
            }
            if (data.hasOwnProperty('eqCost')) {
                obj['eqCost'] = ApiClient.convertToType(data['eqCost'], 'Number');
            }
            if (data.hasOwnProperty('eqFix')) {
                obj['eqFix'] = ApiClient.convertToType(data['eqFix'], 'String');
            }
        }
        return obj;
    }


}

/**
 * @member {String} _id
 */
Equipment.prototype['_id'] = undefined;

/**
 * @member {String} eqName
 */
Equipment.prototype['eqName'] = undefined;

/**
 * @member {String} eqType
 */
Equipment.prototype['eqType'] = undefined;

/**
 * @member {Number} eqCost
 */
Equipment.prototype['eqCost'] = undefined;

/**
 * @member {String} eqFix
 */
Equipment.prototype['eqFix'] = undefined;






export default Equipment;

