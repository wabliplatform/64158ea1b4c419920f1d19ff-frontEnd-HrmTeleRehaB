/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Room from '../model/Room';

/**
* Room service.
* @module api/RoomApi
* @version 1.0.0
*/
export default class RoomApi {

    /**
    * Constructs a new RoomApi. 
    * @alias module:api/RoomApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createroom operation.
     * @callback module:api/RoomApi~createroomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Room} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Room} room data to be created
     * @param {module:api/RoomApi~createroomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Room}
     */
    createroom(room, callback) {
      let postBody = room;
      // verify the required parameter 'room' is set
      if (room === undefined || room === null) {
        throw new Error("Missing the required parameter 'room' when calling createroom");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Room;
      return this.apiClient.callApi(
        '/room', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteroom operation.
     * @callback module:api/RoomApi~deleteroomCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} roomId the Id parameter
     * @param {module:api/RoomApi~deleteroomCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteroom(roomId, callback) {
      let postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling deleteroom");
      }

      let pathParams = {
        'roomId': roomId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/room/{roomId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllroom operation.
     * @callback module:api/RoomApi~getAllroomCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Room>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/RoomApi~getAllroomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Room>}
     */
    getAllroom(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Room];
      return this.apiClient.callApi(
        '/room/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getroom operation.
     * @callback module:api/RoomApi~getroomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Room} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} roomId the Id parameter
     * @param {module:api/RoomApi~getroomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Room}
     */
    getroom(roomId, callback) {
      let postBody = null;
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling getroom");
      }

      let pathParams = {
        'roomId': roomId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Room;
      return this.apiClient.callApi(
        '/room/{roomId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateroom operation.
     * @callback module:api/RoomApi~updateroomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Room} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} roomId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Room} opts.room data to be updated
     * @param {module:api/RoomApi~updateroomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Room}
     */
    updateroom(roomId, opts, callback) {
      opts = opts || {};
      let postBody = opts['room'];
      // verify the required parameter 'roomId' is set
      if (roomId === undefined || roomId === null) {
        throw new Error("Missing the required parameter 'roomId' when calling updateroom");
      }

      let pathParams = {
        'roomId': roomId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Room;
      return this.apiClient.callApi(
        '/room/{roomId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
