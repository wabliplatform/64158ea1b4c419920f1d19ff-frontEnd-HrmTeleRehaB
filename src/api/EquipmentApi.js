/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Equipment from '../model/Equipment';

/**
* Equipment service.
* @module api/EquipmentApi
* @version 1.0.0
*/
export default class EquipmentApi {

    /**
    * Constructs a new EquipmentApi. 
    * @alias module:api/EquipmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createequipment operation.
     * @callback module:api/EquipmentApi~createequipmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Equipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Equipment} equipment data to be created
     * @param {module:api/EquipmentApi~createequipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Equipment}
     */
    createequipment(equipment, callback) {
      let postBody = equipment;
      // verify the required parameter 'equipment' is set
      if (equipment === undefined || equipment === null) {
        throw new Error("Missing the required parameter 'equipment' when calling createequipment");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Equipment;
      return this.apiClient.callApi(
        '/equipment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteequipment operation.
     * @callback module:api/EquipmentApi~deleteequipmentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} equipmentId the Id parameter
     * @param {module:api/EquipmentApi~deleteequipmentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteequipment(equipmentId, callback) {
      let postBody = null;
      // verify the required parameter 'equipmentId' is set
      if (equipmentId === undefined || equipmentId === null) {
        throw new Error("Missing the required parameter 'equipmentId' when calling deleteequipment");
      }

      let pathParams = {
        'equipmentId': equipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/equipment/{equipmentId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllequipment operation.
     * @callback module:api/EquipmentApi~getAllequipmentCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Equipment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/EquipmentApi~getAllequipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Equipment>}
     */
    getAllequipment(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Equipment];
      return this.apiClient.callApi(
        '/equipment/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getequipment operation.
     * @callback module:api/EquipmentApi~getequipmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Equipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} equipmentId the Id parameter
     * @param {module:api/EquipmentApi~getequipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Equipment}
     */
    getequipment(equipmentId, callback) {
      let postBody = null;
      // verify the required parameter 'equipmentId' is set
      if (equipmentId === undefined || equipmentId === null) {
        throw new Error("Missing the required parameter 'equipmentId' when calling getequipment");
      }

      let pathParams = {
        'equipmentId': equipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Equipment;
      return this.apiClient.callApi(
        '/equipment/{equipmentId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateequipment operation.
     * @callback module:api/EquipmentApi~updateequipmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Equipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} equipmentId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Equipment} opts.equipment data to be updated
     * @param {module:api/EquipmentApi~updateequipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Equipment}
     */
    updateequipment(equipmentId, opts, callback) {
      opts = opts || {};
      let postBody = opts['equipment'];
      // verify the required parameter 'equipmentId' is set
      if (equipmentId === undefined || equipmentId === null) {
        throw new Error("Missing the required parameter 'equipmentId' when calling updateequipment");
      }

      let pathParams = {
        'equipmentId': equipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Equipment;
      return this.apiClient.callApi(
        '/equipment/{equipmentId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
